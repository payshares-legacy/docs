<?xml version="1.0" encoding="utf-8"?>
<commands>
    <command>
        <name>account_currencies</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>

        <argument>
            <name>account</name>
            <required>true</required>
            <desc>The ID of the account you are interested in.</desc>
        </argument>
        <common>ledger_index</common>

        <result>
            <name>receive_currencies</name>
            <desc>Array of currencies this account is able to receive.</desc>
        </result>
        <result>
            <name>send_currencies</name>
            <desc>Array of currencies this account is able to send.</desc>
        </result>

        <cli_example><![CDATA[> paysharesd account_currencies gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U

Connecting to: 0.0.0.0:9002
{
  "result" : {
    "ledger_current_index" : 21741,
    "receive_currencies" : ["USD","LTC"],
    "send_currencies" : ["USD","LTC"],
    "status" : "success"
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "account_currencies",
  "params": [
    {
      "account": "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "account_currencies",
  "id": 1234567,
  "account": "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
}]]></ws_example>
    </command>
<command>
    <name>account_info</name>
    <admin>false</admin>
    <desc>Returns information about the given account.</desc>

    <argument>
        <name>account</name>
        <required>true</required>
        <desc>The account you are interested in.</desc>
    </argument>



    <result>
        <name>Balance</name>
        <type>int</type>
        <desc><![CDATA[ The number of paysharess this account holds, in micropaysharess. ]]></desc>
    </result>
    <result>
        <name>Flags</name>
        <desc>What account flags are set.</desc>
    </result>
    <result>
        <name>OwnerCount</name>
        <desc>The number of offers and trust lines created by this account. Useful for calculating the account's reserve.</desc>
    </result>
    <result>
        <name>PreviousTxnID</name>
        <desc>The Transaction ID of the last transaction sent by this account.</desc>
    </result>
    <result>
        <name>PreviousTxnLgrSeq</name>
        <desc>The ledger sequence number this account's last transaction appeared in.</desc>
    </result>
    <result>
        <name>Sequence</name>
        <desc>The current transaction sequence number of this account.</desc>
    </result>
    <result>
        <name>index</name>
        <desc>The index in the ledger of this account entry.</desc>
    </result>

    <cli_example><![CDATA[> paysharesd account_info ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb

{
"result": {
"account_data": {
  "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
  "Balance": "9974964999552",
  "Flags": 0,
  "LedgerEntryType": "AccountRoot",
  "OwnerCount": 1,
  "PreviousTxnID": "61BF46D3EB11A513FCC885EBD76615A83361E163BD9E7155B4396C8A4FF9FC58",
  "PreviousTxnLgrSeq": 3486,
  "Sequence": 41,
  "index": "6047FB9C7976F2D0554618F5ABFF423E7136205BAF19E92BE9D295E549442C45"
},
"ledger_current_index": 3698,
"status": "success"
}
}]]></cli_example>
    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "account_info",
  "params": [
    {
      "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb"
    }
  ]
}']]></rpc_example>
    <ws_example><![CDATA[{
  "command": "account_info",
  "id": 1234567,
  "account": "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
}]]></ws_example>
    </command>
    <command>
        <name>account_lines</name>
        <admin>false</admin>
        <desc>
            Gets a list of all trust lines a particular account is a part of. A trust line is how credits are tracked in the Payshares network.
            A trust line has an account on either end, a currency , the amount each account trusts the other for in that currency, and a current balance.
        </desc>

        <argument>
            <name>account</name>
            <required>true</required>
            <desc>The account you are fetching the lines of. Account A.</desc>
        </argument>
        <argument>
            <name>peer</name>
            <desc>The account ID of another account. If specified will only return the trust lines from Account A to this peer.</desc>
        </argument>
        <common>ledger_index</common>

        <result>
            <name>account</name>
            <desc>The account on the other side of the trust line. Account B.</desc>
        </result>
        <result>
            <name>balance</name>
            <desc>The current balance of credit between A and B. Balance is positive if A is holding IOUs from B.</desc>
        </result>
        <result>
            <name>currency</name>
            <desc>The currency of the trust line.</desc>
        </result>
        <result>
            <name>limit</name>
            <desc>How much account A trusts account B for.</desc>
        </result>
        <result>
            <name>limit_peer</name>
            <desc>How much account B trusts account A for.</desc>
        </result>
        <result>
            <name>authorized</name>
            <type>bool</type>
            <desc>This is present if the peer has authorized this account to hold its credit.</desc>
        </result>
        <result>
            <name>authorized_peer</name>
            <type>bool</type>
            <desc>This is present if this account has authorized the peer to hold its credit.</desc>
        </result>
        <result>
            <name>quality_in</name>
            <type>int</type>
            <desc></desc>
        </result>
        <result>
            <name>quality_out</name>
            <type>int</type>
            <desc></desc>
        </result>

        <cli_example><![CDATA[>paysharesd account_lines ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C

{
  "result": {
    "account": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
    "lines": [
      {
        "account": "gT5KkmymioQvnwjuRkWZVRzsszfPxLCvU",
        "balance": "-5000",
        "currency": "USD",
        "limit": "0",
        "limit_peer": "10000",
        "quality_in": 0,
        "quality_out": 0
      },
      {
        "account": "gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq",
        "balance": "0",
        "currency": "USD",
        "limit": "0",
        "limit_peer": "10000",
        "quality_in": 0,
        "quality_out": 0
      }
    ],
    "status": "success"
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "account_lines",
  "params": [
    {
      "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb"
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "account_lines",
  "id": 1234567,
  "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb"
}]]></ws_example>
    </command>
    <command>
        <name>account_offers</name>
        <admin>false</admin>
        <desc>Gets a list of all the offers this account has made.</desc>

        <argument>
            <name>account</name>
            <required>true</required>
            <desc>The account you are getting the offers of.</desc>
        </argument>

        <cli_example><![CDATA[> paysharesd account_offers ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb

Loading: "paysharesd.cfg"
Connecting to: 0.0.0.0:39002
{
  "result" : {
    "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "offers" : [
      {
        "flags" : 0,
        "seq" : 47,
        "taker_gets" : {
          "currency" : "BTC",
          "issuer" : "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value" : "2.5"
        },
        "taker_pays" : {
          "currency" : "USD",
          "issuer" : "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value" : "1500"
        }
      },
      {
        "flags" : 0,
        "seq" : 48,
        "taker_gets" : {
          "currency" : "BTC",
          "issuer" : "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value" : "2.5"
        },
        "taker_pays" : {
          "currency" : "USD",
          "issuer" : "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value" : "1600"
        }
      }
    ],
    "status" : "success"
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "account_offers",
  "params": [
    {
      "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb"
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "account_offers",
  "id": 1234567,
  "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb"
}]]></ws_example>
        <ws_result><![CDATA[{
  "id": 120,
  "result": {
    "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "offers": [
      {
        "flags": 0,
        "seq": 47,
        "taker_gets": {
          "currency": "BTC",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value": "2.5"
        },
        "taker_pays": {
          "currency": "USD",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value": "1500"
        }
      },
      {
        "flags": 0,
        "seq": 48,
        "taker_gets": {
          "currency": "BTC",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value": "2.5"
        },
        "taker_pays": {
          "currency": "USD",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
          "value": "1600"
        }
      }
    ]
  },
  "status": "success",
  "type": "response"
}]]></ws_result>
    </command>
    <command>
        <name>ping</name>
        <admin>false</admin>
        <desc>Command to test connectivity to paysharesd.</desc>

        <cli_example><![CDATA[ > paysharesd ping

{
  "result" : {
    "status" : "success"
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '{ "method" : "ping" }']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "ping",
  "id": 1234567
}]]></ws_example>
    </command>
    <command>
        <name>transaction_entry</name>
        <admin>false</admin>
        <desc><![CDATA[Get the details of a particular transaction from a hash and a ledger index. It is useful since it is usually faster since it only has to search one ledger. However, it only works if you already know that the ledger index of this confirmed transaction. To search all ledgers, use the <a href="#api-tx">tx</a> command instead.]]></desc>

        <argument>
            <name>tx_hash</name>
            <required>true</required>
            <type>hash</type>
            <desc>The hash of the transaction you are interested in.</desc>
        </argument>
        <argument>
            <name>ledger_index</name>
            <required>true</required>
            <type>int</type>
            <desc><![CDATA[Ledger index in which to search for the transaction. If you do not absolutely know it, use the <a href="#api-tx">tx</a> command instead.]]></desc>
        </argument>

        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "transaction_entry",
  "params": [
    {
      "tx_hash": "002F9E7ACA1F5A00CE8288B2E07DB3A363F37D9BD12B4E71CAAFC0F7BC9746AC",
      "ledger_index": 18518
    }
  ]
}'
]]></rpc_example>
        <ws_example><![CDATA[{
  "command": "transaction_entry",
  "id": 1234567,
  "tx_hash": "002F9E7ACA1F5A00CE8288B2E07DB3A363F37D9BD12B4E71CAAFC0F7BC9746AC",
  "ledger_index": 18518
}]]></ws_example>
    </command>

    <command>
        <name>account_tx</name>
        <admin>false</admin>
        <desc>Get a list of transactions that affected this account.</desc>

        <argument>
            <name>account</name>
            <required>true</required>
            <desc>The account ID to fetch transactions from.</desc>
        </argument>

        <argument>
            <name>ledger_index_min</name>
            <type>int</type>
            <default>0</default>

            <desc>The earliest ledger to fetch transactions from.</desc>
        </argument>

        <argument>
            <name>ledger_index_max</name>
            <type>int</type>
            <default>-1</default>

            <desc>The latest ledger to fetch transactions from. Set to -1 to use the current ledger as the maximum.</desc>
        </argument>

        <argument>
            <name>binary</name>
            <desc>Returns the transaction in hex instead of JSON.</desc>
        </argument>

        <argument>
            <name>forward</name>
            <desc>Returns the transactions in ascending order by ledger.</desc>
        </argument>

        <argument>
            <name>limit</name>
            <type>int</type>
            <default>-1</default>

            <desc>Limit the number of transactions paysharesd will send back to you. paysharesd is configured with its own limits so you may not receive as many transactions as you ask for. Set to -1 to use the limit set by paysharesd.</desc>
        </argument>

        <argument>
            <name>marker</name>
            <desc>Can be used to resume previous query. Use 'marker' value returned in result of query you want resumed. </desc>
        </argument>


     <cli_example><![CDATA[> paysharesd account_tx ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "account_tx",
  "params": [
    {
      "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
      "limit": 4
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "account_tx",
  "id": 1234567,
  "account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
  "limit": 4
}]]></ws_example>
    </command>

    <command>
        <name>book_offers</name>
        <admin>false</admin>
        <desc>Returns the offers in a given orderbook. An orderbook is a particular currency/issuer on the buy side and a different currency/issuer on the sell side.</desc>

        <argument>
            <name>taker_gets</name>
            <required>true</required>
            <type>amount</type>
            <desc>The amount for the buy side. A value should not be specified in this amount object, as the buy side of an orderbook is simply a currency/issuer pair.</desc>
        </argument>
        <argument>
            <name>taker_pays</name>
            <required>true</required>
            <type>amount</type>
            <desc>The amount for the sell side. A value should not be specified in this amount object, as the sell side of an orderbook is simply a currency/issuer pair.</desc>
        </argument>
        <argument>
            <name>taker</name>
            <type>string</type>
            <desc>If specified will show the orderbook from the point of view of the taker.</desc>
        </argument>
        <argument>
            <name>marker</name>
            <desc>Token indicating start of page, it is returned from a previous call.</desc>
        </argument>
        <common>ledger_index</common>

        <result>
            <name>hash</name>
            <desc>The hash of the submitted transaction.</desc>
        </result>

        <result>
            <name>marker</name>
            <desc>Used for subsequent calls to page through the results. Not returned if there are no more results.</desc>
        </result>
        <result>
            <name>offers</name>
            <desc>The offers sorted from best to worst. </desc>
        </result>

        <cli_example><![CDATA[> paysharesd book_offers

{ "method" : "book_offers",
  "id": 1234567,
  "params" : [
    {
      "taker_gets": {
        "currency": "XPS"
      },
      "taker_pays": {
        "issuer": "gnhPFpbYXcYGMkGxfWdQGFfuKEdJoEThVo",
        "currency": "BTC"
      }
    }
  ]
}

        ]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "book_offers",
  "params": [
    {
      "taker_gets": {
        "currency": "XPS"
      },
      "taker_pays": {
        "issuer": "gnhPFpbYXcYGMkGxfWdQGFfuKEdJoEThVo",
        "currency": "BTC"
      }
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "book_offers",
  "id": 1234567,
  "taker_gets": {
    "currency": "XPS"
  },
  "taker_pays": {
    "issuer": "gnhPFpbYXcYGMkGxfWdQGFfuKEdJoEThVo",
    "currency": "BTC"
  }
}]]></ws_example>
    </command>
    <command>
        <name>create_keys</name>
        <admin>false</admin>
        <desc>Generates public/private key pair for use as a Payshares account.</desc>

        <argument>
            <name>passphrase</name>
            <type>string</type>
            <desc>If specified it will create the secret key from a hash of the passphrase.</desc>
        </argument>

        <result>
            <name>account_id</name>
            <desc>The generated accountID. It will become a usable payshares account if someone sends paysharess to it.</desc>
        </result>
        <result>
            <name>master_seed</name>
            <desc>The secret key in base58 format that corresponds to the accountID.</desc>
        </result>
        <result>
            <name>master_seed_hex</name>
            <desc>The secret key in hex format that corresponds to the accountID.</desc>
        </result>
        <result>
            <name>public_key</name>
            <desc>The public key in base58 format that corresponds to the accountID.</desc>
        </result>
        <result>
            <name>public_key_hex</name>
            <desc>The public key in hex format that corresponds to the accountID.</desc>
        </result>

        <cli_example><![CDATA[> paysharesd create_keys

Connecting to: 0.0.0.0:9002
{
  "result" : {
    "account_id" : "gppi8qEBctnubQKUJGNLjBypw4VWah5F7B",
    "master_seed" : "s3NRKFaJgTqKajhWubLk3zbnBXhbo8L2hEojhe3pvmhDzKzxH25",
    "master_seed_hex" : "8EB76FE8F0A06088383C3E4B22089710ED556D39DDFAE6360AEA606D4EE944B2",
    "public_key" : "pGz2rDZDCWVhyk9M3Fu3kgydAVsfovQgcVbLX66xQirxQ4YQ1hj",
    "public_key_hex" : "E6EEAD890F8305986298E7ED77F3854A992D8CD3927DD81DE0EF41144C5E151C",
    "status" : "success"
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '{ "method" : "create_keys" }']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "create_keys",
  "id": 1234567
}]]></ws_example>
    </command>

    <command>
        <name>ledger</name>
        <admin>false</admin>
        <desc>Gets info about a particular ledger.</desc>

            <argument>
                <name>full</name>
                <type>bool</type>
                <default>false</default>
                <desc>Return all the ledger entries. This is equivalent to setting accounts, transactions, and expand all to true. paysharesd can be configured to support this or not.</desc>
            </argument>

            <argument>
                <name>accounts</name>
                <type>bool</type>
                <default>false</default>
                <desc>If set to true, it will return the accounts tree for that public ledger block.</desc>
            </argument>

            <argument>
                <name>transactions</name>
                <type>bool</type>
                <default>false</default>
                <desc>If true, return the transactions for the ledger.</desc>
            </argument>

            <argument>
                <name>expand</name>
                <type>bool</type>
                <default>false</default>
                <desc>If set to true, returns the ledger and transaction entries in JSON format. Otherwise, returns their identifying hashes.</desc>
            </argument>
        <common>ledger_index</common>




        <cli_example><![CDATA[> paysharesd ledger

Connecting to: 0.0.0.0:9002
{
  "result": {
    "closed": {
      "ledger": {
        "accepted": true,
        "account_hash": "62E646A558E15D64B8F2D0E3EA9D931A678CCE02866D416EE95BC686C58634AC",
        "close_time": 459542460,
        "close_time_human": "2014-Jul-24 18:41:00",
        "close_time_resolution": 10,
        "closed": true,
        "fee_pool": "0",
        "hash": "A2243364D4426DC0CD979FB977D3095DB60A53308F8275D4B05D03E625743FCB",
        "inflate_seq": "1",
        "ledger_hash": "A2243364D4426DC0CD979FB977D3095DB60A53308F8275D4B05D03E625743FCB",
        "ledger_index": "402",
        "parent_hash": "B3DC425B140FC2550F3DF2F69D3259A32A60BC5B46323B015EB889AE36A999F0",
        "seqNum": "402",
        "totalCoins": "100000000000000000",
        "total_coins": "100000000000000000",
        "transaction_hash": "0000000000000000000000000000000000000000000000000000000000000000"
      }
    },
    "open": {
      "ledger": {
        "closed": false,
        "ledger_index": "403",
        "parent_hash": "A2243364D4426DC0CD979FB977D3095DB60A53308F8275D4B05D03E625743FCB",
        "seqNum": "403"
      }
    },
    "status": "success"
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '{ "method" : "ledger" }']]></rpc_example>
<rpc_result><![CDATA[{
  "result": {
    "closed": {
      "ledger": {
        "accepted": true,
        "account_hash": "7B2FD91FF69C919A7A2C1395DB22C69D806B6D750EB1D7BB8872329A869CA98B",
        "close_time": 459542140,
        "close_time_human": "2014-Jul-24 18:35:40",
        "close_time_resolution": 10,
        "closed": true,
        "fee_pool": "3826",
        "hash": "333090A67B65A8CCD97D8168674D3819E94B9D42D89D7A42F5A768702099B6C7",
        "inflate_seq": "3",
        "ledger_hash": "333090A67B65A8CCD97D8168674D3819E94B9D42D89D7A42F5A768702099B6C7",
        "ledger_index": "46728",
        "parent_hash": "9BBF29D271C854949BBDB69CA6DFF847A6295A1955E6A862855F147383D8736E",
        "seqNum": "46728",
        "totalCoins": "100038147837446155",
        "total_coins": "100038147837446155",
        "transaction_hash": "0000000000000000000000000000000000000000000000000000000000000000"
      }
    },
    "open": {
      "ledger": {
        "closed": false,
        "ledger_index": "46729",
        "parent_hash": "333090A67B65A8CCD97D8168674D3819E94B9D42D89D7A42F5A768702099B6C7",
        "seqNum": "46729"
      }
    },
    "status": "success"
  }
}]]>
</rpc_result>
        <ws_example><![CDATA[{
  "command": "ledger",
  "id": 1234567
}]]></ws_example>
        <ws_result><![CDATA[{
  "result": {
    "closed": {
      "ledger": {
        "accepted": true,
        "account_hash": "2CE104972C7FD1BC9A6FCC5D46B6D13B6F5184AEB105740BBCF69D112D6642EB",
        "close_time": 459542280,
        "close_time_human": "2014-Jul-24 18:38:00",
        "close_time_resolution": 10,
        "closed": true,
        "fee_pool": "0",
        "hash": "C4EDC2FF215FDE662E1771A4383C1204BB66CEFCDF375E6554DEE4229520CD20",
        "inflate_seq": "1",
        "ledger_hash": "C4EDC2FF215FDE662E1771A4383C1204BB66CEFCDF375E6554DEE4229520CD20",
        "ledger_index": "393",
        "parent_hash": "54F9E657F3122A3375C427DEE484F69F020D79FA73B85D8FFCFBA48AC763036C",
        "seqNum": "393",
        "totalCoins": "100000000000000000",
        "total_coins": "100000000000000000",
        "transaction_hash": "0000000000000000000000000000000000000000000000000000000000000000"
      }
    },
    "open": {
      "ledger": {
        "closed": false,
        "ledger_index": "394",
        "parent_hash": "C4EDC2FF215FDE662E1771A4383C1204BB66CEFCDF375E6554DEE4229520CD20",
        "seqNum": "394"
      }
    }
  },
  "status": "success",
  "type": "response"
}]]></ws_result>

    </command>

    <command>
        <name>find_path</name>
        <admin>false</admin>
        <desc><![CDATA[Finds the best path for a transfer. Paysharesd will continue to send updates as it finds better paths or as the state of the ledger changes until <strong>find_path</strong> is called again with the <strong>close</strong> subcommand.

A websocket connection may only have one open pathfinding request.
If paysharesd responds because of a client query the response will have a field <strong>type</strong> set to <em>response</em>.
If paysharesd is sending an unsolicited response the <strong>type</strong> field will be set to <em>find_path</em>.
This command is only available via the Websocket API. If you want to use as RPC or command line or you don't want ongoing path updates use <a href="#api-static_path_find">static_path_find</a> instead.
            ]]></desc>

        <argument>
          <name>subcommand</name>
          <required>true</required>
          <desc><![CDATA[subcommand can be either <ul><li>create</li><li>status</li><li>close</li></ul>]]></desc>
        </argument>
        <argument>
            <name>source_account</name>
            <required>true</required>
            <desc>Sender's Payshares address.</desc>
        </argument>
        <argument>
            <name>destination_account</name>
            <required>true</required>
            <desc>Receiver's Payshares address.</desc>
        </argument>
        <argument>
            <name>destination_amount</name>
            <type>amount</type>
            <required>true</required>
            <desc>Amount sender is trying to send to receiver.</desc>
        </argument>

        <result>
            <name>alternatives</name>
            <desc>Each entry will correspond to one possible source currency.</desc>
        </result>

        <cli_example><![CDATA[find_path only available over websocket.]]></cli_example>
        <rpc_example><![CDATA[find_path only available over websocket. Consider using static_path_find]]></rpc_example>
        <ws_example><![CDATA[{
  "command": "find_path",
  "id": 1234567,
  "subcommand": "create",
  "source_account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
  "destination_account": "gBV8kvK1rkFPmNRFzFkipHy2cZAeUf6RPz",
  "destination_amount": {
    "currency": "USD",
    "value": "50",
    "issuer": "gBV8kvK1rkFPmNRFzFkipHy2cZAeUf6RPz"
  }
}]]></ws_example>
    </command>

<command>
    <name>sign</name>
    <admin>false</admin>
    <desc><![CDATA[ Have paysharesd sign a transaction for you. You can introduce the transaction later with <a href="#api-submit">submit</a> by just including the tx_blob. ]]></desc>


    <argument>
        <name>tx_json</name>
        <required>true</required>
        <desc><![CDATA[This is the JSON representation of the transaction for server to sign with the private key of the secret.</br>
            If <strong>Sequence</strong> or <strong>Fee</strong> are not filled out then paysharesd will fill them in for if you.]]></desc>
    </argument>

    <argument>
        <name>secret</name>
        <required>true</required>
        <desc>The base58 encoded secret key of the signer.</desc>
    </argument>
    <argument>
        <name>offline</name>
        <type>bool</type>
        <desc>If true paysharesd won't attempt to verify that the transaction is valid it will just sign it for you.</desc>
    </argument>

    <result>
        <name>hash</name>
        <desc>The hash of the submitted transaction.</desc>
    </result>
    <result>
        <name>tx_blob</name>
        <desc>A hex representation of the signed transaction. This result can vary between calls even if supplied the same parameters.</desc>
    </result>

    <cli_example><![CDATA[]]></cli_example>
    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "sign",
  "params": [{
    "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
    "tx_json": {
      "TransactionType": "Payment",
      "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
      "Destination": "gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq",
      "Amount": {
        "currency": "USD",
        "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
        "value": "10"
      }
    }
  }]
}']]></rpc_example>
    <ws_example><![CDATA[{
  "command": "sign",
  "id": 1234567,
  "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
  "tx_json": {
    "TransactionType": "Payment",
    "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "Destination": "gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq",
    "Amount": {
      "currency": "USD",
      "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
      "value": "10"
    }
  }
}]]></ws_example>
</command>
    <command>
        <name>static_path_find</name>
        <admin>false</admin>
        <desc><![CDATA[Finds a path for a transfer. If you want updates to the path as the state of the ledger changes use <a href="#api-find_path">find_path</a> instead.]]></desc>

        <argument>
            <name>source_account</name>
            <required>true</required>
            <desc>Sender's Payshares address.</desc>
        </argument>

        <argument>
            <name>destination_account</name>
            <required>true</required>
            <desc>Receiver's Payshares address.</desc>
        </argument>

        <argument>
            <name>destination_amount</name>
            <type>amount</type>
            <required>true</required>
            <desc>Amount sender is trying to send to receiver.</desc>
        </argument>

        <result>
            <name>alternatives</name>
            <desc>List of path choices.</desc>
        </result>
        <result>
            <name>source_amount</name>
            <type>amount</type>
            <desc>The cost of this path for the source account.</desc>
        </result>
        <result>
            <name>paths_computed</name>
            <desc>The path to include in the payment transaction.</desc>
        </result>

        <result>
            <name>destination_currencies</name>
            <desc>List of currencies this destination can hold.</desc>
        </result>

        <cli_example><![CDATA[paysharesd static_path_find [json_object] [ledger]]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "static_path_find",
  "params": [
    {
      "source_account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
      "destination_account": "gBV8kvK1rkFPmNRFzFkipHy2cZAeUf6RPz",
      "destination_amount": {
        "currency": "USD",
        "value": "50",
        "issuer": "gBV8kvK1rkFPmNRFzFkipHy2cZAeUf6RPz"
      }
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "static_path_find",
  "id": 1234567,
  "source_account": "gPeFowjy2izeVYvhmu6gZRr6jMobxTyGUU",
  "destination_account": "gBV8kvK1rkFPmNRFzFkipHy2cZAeUf6RPz",
  "destination_amount": {
    "currency": "USD",
    "value": "50",
    "issuer": "gBV8kvK1rkFPmNRFzFkipHy2cZAeUf6RPz"
  }
}]]></ws_example>
    </command>

<command>
    <subnav>submit</subnav>
    <name>Payment</name>
    <admin>false</admin>
    <desc>Submit a payment transaction.</desc>

    <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Set to "Payment".</desc>
    </argument>
    <argument>
        <name>Account</name>
        <required>true</required>
        <desc>The account sending the payment.</desc>
    </argument>
    <argument>
        <name>Destination</name>
        <required>true</required>
        <desc>The account receiving the payment.</desc>
    </argument>
    <argument>
        <name>Amount</name>
        <type>amount</type>
        <required>true</required>
        <desc><![CDATA[ The amount to send. This is either a number of micropaysharess (if sending XPS) or a {value,currency,issuer} triplet for sending a credit. ]]></desc>
    </argument>
    <argument>
        <name>Fee</name>
        <desc><![CDATA[Set the transaction fee in micropaysharess that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
    </argument>
    <argument>
        <name>Sequence</name>
        <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
    </argument>
    <argument>
        <name>DestinationTag</name>
        <type>int</type>
        <desc>Optional tag to associate with the transaction. </desc>
    </argument>

    <argument>
        <name>Paths</name>
        <desc>List of paths to send through.</desc>
    </argument>


    <cli_example><![CDATA[ > paysharesd submit s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN \
"{"TransactionType":"Payment","Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Destination":"gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq","Amount":"2500000000"}"]]></cli_example>
    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "sfwtwgV3zHekZMm6F2cNPzEGzogQqPMEZcdVftKnrstngZvotYr",
      "tx_json": {
        "TransactionType": "Payment",
        "Account": "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U",
        "Destination": "g4eRqgZfzfj3132y17iaf2fp6HQj1gofjt",
        "Amount": {
          "currency": "USD",
          "value": "2",
          "issuer": "gBAde4mkDijZatAdNhBzCsuC7GP4MzhA3B"
        }
      }
    }
  ]
}' ]]></rpc_example>

    <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
  "tx_json": {
    "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "Amount": "1000000000",
    "Destination": "gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq",
    "TransactionType": "Payment"
  }
}]]></ws_example>
</command>

<command>
    <name>AccountSet</name>
    <subnav>submit</subnav>
    <admin>false</admin>
    <desc>Submit an AccountSet transaction. This is used to set various flags of the account entry. You can use it to set the inflation destination of an account.</desc>

    <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Set to "AccountSet".</desc>
    </argument>
    <argument>
        <name>InflationDest</name>
        <type>address</type>
        <desc><![CDATA[Change the inflation destination for this account. ]]></desc>
    </argument>
    <argument>
        <name>SetAuthKey</name>
        <type>address</type>
        <desc><![CDATA[Set an account whose secret key can be used to sign "SetAuth" <a href="#TrustSet">TrustSet</a> transactions. This is useful when a Gateway's issuing address key is in cold storage, and can't be used to authorize accounts to hold their credits. Instead, a delegated account can be set to sign SetAuth transactions and stored on the server, without having to store the issuing address key on the server.]]></desc>
    </argument>
    <argument>
        <name>TransferRate</name>
        <type>int</type>
        <default>1000000000</default>
        <desc><![CDATA[Set the transfer rate that this account will charge any time its credit moves from one account to another.
        The actual rate charged is equivalent to TransferRate/1000000000.
        For example if some gateway "WizardPay" has sets their TransferRate to 1020000000, the equivalent of 2%. Now Alice wants to send 100 WizardPay USD to Charlie.
        Alice will need to send 102 WizardPay USD so 100 gets to Charlie and 2 is essentially returned to "WizardPay" to pay the credit transfer fee.
        <p>Set the TransferRate to 1000000000 for no fee to move credit. You can't set the TransferRate below 1000000000.
         ]]></desc>
    </argument>
    <argument>
        <name>SetFlag</name>
        <type>int</type>
        <desc><![CDATA[Set to one of the following values:
         <ul>
         <li><strong>1</strong>- Require Destination tag flag. This flag is a hint to the client that this account only wants transactions with a destination tag.</li>
         <li><strong>2</strong>- Require Auth flag. If this flag is set then no one can hold credit from this account without prior authorization from this account. This setting is useful for gateways that need to KYC any that holds credit from them.</li>
         <li><strong>4</strong>- Disable Master key flag. If this flag is set then the master secret key will not be used to sign any transactions. Account can only be accessed using the regular key (designated with a <a href="#SetRegularKey">SetRegularKey</a> transaction). This flag can then only be cleared by the regular key.<br />If master key is disabled and regular key is lost or invalid, the account will never be able to get a transaction into a ledger anymore. One use case for this is to lock/burn an account and associated XPS/credits.</li>
         </ul>]]></desc>
    </argument>
    <argument>
        <name>ClearFlag</name>
    <type>int</type>
    <desc><![CDATA[Set to one of the following values:
         <ul>
         <li><strong>1</strong>- Require Destination tag flag. This flag is a hint to the client that this account only wants transactions with a destination tag.</li>
         <li><strong>2</strong>- Require Auth flag. If this flag is set then no one can hold credit from this account without prior authorization from this account. This setting is useful for gateways that need to KYC any that holds credit from them.</li>
         <li><strong>4</strong>- Disable Master key flag. If this flag is set then the master secret key will not be used to sign any transactions. Account can only be accessed using the regular key (designated with <a href="#SetRegularKey">SetRegularKey</a>. This flag can then only be cleared by the regular key.<br />If master key is disabled and regular key is lost or invalid, the account will never be able to get a transaction into a ledger anymore. One use case for this is to lock/burn an account and associated XPS/credits.</li>
         </ul>
]]></desc>
    </argument>

    <argument>
        <name>Fee</name>
        <desc><![CDATA[Set the transaction fee in micropaysharess that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
    </argument>
    <argument>
        <name>Sequence</name>
        <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
    </argument>

    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "sfVPRS5KEGzyNAk3pwvV1cdkztkEEUAEZJQ8ydwiGpR9hDz4R9K",
      "tx_json": {
        "TransactionType": "AccountSet",
        "Account": "gEr9GxER4E3zTyX4RvF4HhgZBVZJBqE68M",
        "SetFlag": "1"
      }
    }
  ]
}']]></rpc_example>
    <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "sfVPRS5KEGzyNAk3pwvV1cdkztkEEUAEZJQ8ydwiGpR9hDz4R9K",
  "tx_json": {
    "TransactionType": "AccountSet",
    "Account": "gEr9GxER4E3zTyX4RvF4HhgZBVZJBqE68M",
    "SetFlag": "1"
  }
}]]></ws_example>
</command>

<command>
    <name>SetRegularKey</name>
    <subnav>submit</subnav>
    <admin>false</admin>
    <desc><![CDATA[Use to set or clear this account's <strong>regular key</strong>. The regular key can be used to sign transactions instead of the master secret key.
    This is useful since you can change the regular key if need be without recreating the whole account.
    A regular key is just a normal key pair that can be generated with <a href="#api-create_keys">create keys</a> or any other Payshares account key generator. The master key can also be disabled using <a href="#api-accountset">AccountSet</a>.]]></desc>

    <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Should be set "SetRegularKey".</desc>
    </argument>
    <argument>
        <name>RegularKey</name>
        <desc>If provided will change the regular key to this new value. If not provided it will clear the regular key so only the master key can sign again.</desc>
    </argument>

    <argument>
        <name>Fee</name>
        <desc><![CDATA[Set the transaction fee in micropaysharess that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
    </argument>
    <argument>
        <name>Sequence</name>
        <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
    </argument>

    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "sMasterSecretKeyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
      "tx_json": {
        "TransactionType": "SetRegularKey",
        "Account": "gMasterAccountAddressXXXXXXXXXXXXX",
        "RegularKey": "gNewRegularKeyAddressXXXXXXXXXXXXX"
      }
    }
  ]
}']]></rpc_example>

    <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "sMasterSecretKeyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
  "tx_json": {
    "TransactionType": "SetRegularKey",
    "Account": "gMasterAccountAddressXXXXXXXXXXXXX",
    "RegularKey": "gNewRegularKeyAddressXXXXXXXXXXXXX"
  }
}]]></ws_example>
</command>

<command>
    <name>OfferCreate</name>
    <subnav>submit</subnav>
    <admin>false</admin>
    <desc><![CDATA[Add an offer to the distributed order book.
        Offers are commitments by the offerer to trade a certain amount of one currency for another. Offers can be partially taken.
        Creating an offer might result in an immediate trade if the created offer crosses with an existing one.]]></desc>

    <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Set to "OfferCreate".</desc>
    </argument>
    <argument>
        <name>Account</name>
        <required>true</required>
        <desc>The account creating the offer.</desc>
    </argument>
    <argument>
        <name>TakerGets</name>
        <required>true</required>
        <type>amount</type>
        <desc>This is what the account taking the offer will get. It is what the offer creator is agreeing to pay.</desc>
    </argument>
    <argument>
        <name>TakerPays</name>
        <type>amount</type>
        <required>true</required>
        <desc>This is what the offer creator will get and what the offer taker will pay.</desc>
    </argument>
    <argument>
        <name>OfferSequence</name>
        <desc>The sequence number of a previous offer. If specified the previous offer will be replaced with this one.</desc>
    </argument>
    <argument>
        <name>Fee</name>
        <desc><![CDATA[Set the transaction fee in micropaysharess that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
    </argument>
    <argument>
        <name>Sequence</name>
        <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
    </argument>

    <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
  "tx_json": {
    "TransactionType": "OfferCreate",
    "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "TakerGets": {
      "currency": "USD",
      "value": "1500",
      "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
    },
    "TakerPays": {
      "currency": "BTC",
      "value": "2.5",
      "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
    }
  }
}]]></ws_example>

    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
      "tx_json": {
        "TransactionType": "OfferCreate",
        "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "TakerGets": {
          "currency": "USD",
          "value": "1500",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
        },
        "TakerPays": {
          "currency": "BTC",
          "value": "2.5",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
        }
      }
    }
  ]
}']]></rpc_example>
</command>

<command>
    <name>OfferCancel</name>
    <subnav>submit</subnav>
    <admin>false</admin>
    <desc><![CDATA[Cancels an offer this account has made. The sequence number for an offer can be obtained through <a href="#api-account_offers">account_offers</a> or recorded when the offer was first <a href="#api-offercreate">created</a>.]]></desc>
    <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Set to "OfferCancel".</desc>
    </argument>
    <argument>
        <name>Account</name>
        <required>true</required>
        <desc>The account canceling the offer.</desc>
    </argument>
    <argument>
        <name>OfferSequence</name>
        <required>true</required>
        <desc>The sequence number of the offer to cancel.</desc>
    </argument>
    <argument>
        <name>Fee</name>
        <desc><![CDATA[Set the transaction fee in micropaysharess that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
    </argument>
    <argument>
        <name>Sequence</name>
        <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
    </argument>

    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
      "tx_json": {
        "TransactionType": "OfferCancel",
        "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "OfferSequence": "4217"
      }
    }
  ]
}']]></rpc_example>
    <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
  "tx_json": {
    "TransactionType": "OfferCancel",
    "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "OfferSequence": "4217"
  }
}]]></ws_example>


</command>

<command>
    <name>TrustSet</name>
    <subnav>submit</subnav>
    <admin>false</admin>
    <desc><![CDATA[Creates a trust line allowing the source account account to hold credits from another account up to a specified limit.<br /><br />It is recommended that you set the NoRipple flag (131072). To delete a trust line, set the LimitAmount value to 0 and use the ClearNoRipple (262144) flag (when NoRipple flag is set).]]></desc>
    <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Set to "TrustSet".</desc>
    </argument>
    <argument>
        <name>Account</name>
        <required>true</required>
        <desc>The account extending trust.</desc>
    </argument>
    <argument>
        <name>LimitAmount</name>
        <required>true</required>
        <type>amount</type>
        <desc><![CDATA[An <a href="#api-amount">amount triplet</a> specifying the currency code, credit amount limit, and credit issuer of this trust line. Transactions that cause the account to hold more credits than specified in this amount will fail. For most use cases, setting an extremely large trust limit such is recommended.]]></desc>
    </argument>
    <argument>
        <name>Fee</name>
        <desc><![CDATA[Set the transaction fee in micropaysharess that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
    </argument>
    <argument>
        <name>Flags</name>
        <type>int</type>
        <desc><![CDATA[Allows you to change settings of this line. <strong>NoRipple is recommended</strong> and ClearNoRipple flags is required to cancel the trust line. Possible bit flags are:
        <ul>
        <li>tfSetAuth (0x00010000; 65536) | Used by a gateway account to authorize a target account to receive credits issued by this account.</li>
        <li>tfSetNoRipple (0x00020000; 131072) | Sets the NoRipple flag to prevent rippling through this trust line. <strong>Disabling rippling is highly recommended</strong>.</li>
        <li>tfClearNoRipple (0x00040000; 262144) | Clears NoRipple flag if set and allows deleting of this trust line. <strong>Necessary when deleting a trust line with the NoRipple flag active</strong>.</li>
        </ul>]]></desc>
    </argument>
    <argument>
        <name>Sequence</name>
        <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
    </argument>

    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "s3wmYWJWM1uG3dHfnibU1NHy5isPuAWkBqnZ9KaaSqQVmFAgteM",
      "tx_json": {
        "TransactionType": "TrustSet",
        "Account": "gnwVmV3hDZWsLonhyUzYWReeVYS8AvvohP",
        "LimitAmount": {
          "currency": "USD",
          "value": "1e+19",
          "issuer": "gBAde4mkDijZatAdNhBzCsuC7GP4MzhA3B"
        },
        "Flags": 131072
      }
    }
  ]
}']]></rpc_example>
    <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "s3wmYWJWM1uG3dHfnibU1NHy5isPuAWkBqnZ9KaaSqQVmFAgteM",
  "tx_json": {
    "TransactionType": "TrustSet",
    "Account": "gnwVmV3hDZWsLonhyUzYWReeVYS8AvvohP",
    "LimitAmount": {
      "currency": "USD",
      "value": "1e+19",
      "issuer": "gBAde4mkDijZatAdNhBzCsuC7GP4MzhA3B"
    },
    "Flags": 131072
  }
}]]></ws_example>
</command>

<command>
  <subnav>submit</subnav>
  <name>AccountMerge</name>
  <admin>false</admin>
  <desc><![CDATA[An account merge transaction.<p>Balances are moved to the destination account.</p>
<p>Note that the destination account's trust lines must be able to accomodate for the updated balances:
<ul>
<li>balance must be positive</li>
<li>resulting balance must not be over limit</li>
<li>destination must be authorized if the source account was authorized with a gateway.</li>
</ul></p>]]></desc>

  <argument>
    <name>TransactionType</name>
    <required>true</required>
    <desc>Set to "AccountMerge".</desc>
  </argument>
  <argument>
    <name>Account</name>
    <required>true</required>
    <desc>The source account to merge.</desc>
  </argument>
  <argument>
    <name>Destination</name>
    <required>true</required>
    <desc>The account to merge the source account into.</desc>
  </argument>

  <cli_example><![CDATA[> paysharesd submit sfHTRZFpsX7yc2VJLvhJzpzjiag5W6ofy9xgZSwuubcLhS1atmv \
"{"TransactionType":"AccountMerge","Account":"gD1RB8jG5DTSEnjJ1PQyoHEWXGbGCfCLAZ","Destination":"gUK9iE1ZdTcPFM4dBYKzKpweHxU45vMouQ"}"]]><!--
  --></cli_example>
  <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "sfHTRZFpsX7yc2VJLvhJzpzjiag5W6ofy9xgZSwuubcLhS1atmv",
      "tx_json": {
        "TransactionType": "AccountMerge",
        "Account": "gD1RB8jG5DTSEnjJ1PQyoHEWXGbGCfCLAZ",
        "Destination": "gUK9iE1ZdTcPFM4dBYKzKpweHxU45vMouQ"
      }
    }
  ]
}']]></rpc_example>

  <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "secret": "sfHTRZFpsX7yc2VJLvhJzpzjiag5W6ofy9xgZSwuubcLhS1atmv",
  "tx_json": {
    "Account": "gD1RB8jG5DTSEnjJ1PQyoHEWXGbGCfCLAZ",
    "Destination": "gUK9iE1ZdTcPFM4dBYKzKpweHxU45vMouQ",
    "TransactionType": "AccountMerge"
  }
}]]></ws_example>
</command>

<command>
    <name>submit</name>
    <admin>false</admin>
    <desc>Submits a transaction to the network. The transaction can be submitted unsigned if you include your secret key and paysharesd will sign it for you.</desc>

    <argument>
        <name>secret</name>
        <desc>The signer's secret key. Do not provide this field to untrusted servers. Required if submitting with tx_json parameter.</desc>
    </argument>
    <argument>
        <name>tx_json</name>
        <desc>This is the JSON representation of the transaction to submit. See the specific transactions for details.</desc>
    </argument>

    <argument>
        <name>tx_blob</name>
        <desc><![CDATA[This is a signed and serialized transaction. Obtain a signed transaction blob by either signing the transaction yourself using the javascript-lib, or by calling the <a href="#api-sign">sign</a> command first with the transaction's details. Use this version if you don't want to expose your secret key to paysharesd.]]></desc>
    </argument>
    <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "tx_blob": "1200002280000000243ADE68B16140000000000F424068400000000000000A7320BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4744052F5A5A7342F5E1254CFB29FE7DFAC36D12E0274CBC1569B35B8C9FC251996DA6E78BB84CCF91299CF9C60A2F95761F034DCA58B1C3C465B23754E89520DEA0C811437B1B26BE3C91C55D51586C3F0E5C4B03E9CEA7F8314DF8286CDBB009AA5C29F526B5C3B4C480B44EABE"
    }
  ]
}']]></rpc_example>

  <ws_example><![CDATA[{
  "command": "submit",
  "id": 1234567,
  "tx_blob": "1200002280000000243ADE68B16140000000000F424068400000000000000A7320BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4744052F5A5A7342F5E1254CFB29FE7DFAC36D12E0274CBC1569B35B8C9FC251996DA6E78BB84CCF91299CF9C60A2F95761F034DCA58B1C3C465B23754E89520DEA0C811437B1B26BE3C91C55D51586C3F0E5C4B03E9CEA7F8314DF8286CDBB009AA5C29F526B5C3B4C480B44EABE"
}]]></ws_example>
</command>

    <command>
        <name>subscribe</name>
        <admin>false</admin>
        <desc><![CDATA[Listen to events. If you are using websocket paysharesd will send you messages when an event of the type you are listening to happens.
            You can also specify a URL that is called when an event happens if you are not listening on websocket.
            <p>See <a href="#api-unsubscribe">unsubscribe</a> for when you want to stop the event stream.
            </p>]]></desc>

        <argument>
            <name>streams</name>
            <type>array</type>
            <desc><![CDATA[An array of stream names you want events on. Possible streams:
            <ul>
            <li><strong>ledger</strong> - ledger close events</li>
            <li><strong>transactions</strong> - sends a message for every transaction that makes it into a closed ledger.</li>
            <li><strong>transactions_rt</strong> - sends a message immediately when a this paysharesd sees a transaction and again when the transaction makes it into the ledger.</li>
            <li><strong>server</strong> - sends messages about server status and network connectivity.</li>
            </ul>
            ]]></desc>
        </argument>

        <argument>
            <name>accounts</name>
            <type>array</type>
            <desc><![CDATA[An array of accountIDs you want events on. Will subscribe you to transaction streams for the given accounts.]]></desc>
        </argument>

        <argument>
            <name>accounts_rt</name>
            <type>array</type>
            <desc><![CDATA[An array of accountIDs you want events on. Sends a message immediately when paysharesd sees a transaction effecting one of these accounts and again if the transaction is included in the ledger.]]></desc>
        </argument>

        <argument>
            <name>books</name>
            <type>array</type>
            <desc><![CDATA[An array of objects specifying an order books to listen to.
            Paysharesd will send a message any time one of the specified order books change.
            Order book object is:
            <ul>
            <li><strong>taker_gets</strong>- type of currency and issuer the taker of these offers will get. </li>
            <li><strong>taker_pays</strong>- type of currency and issuer the taker of these offers will pay.  </li>
            <li><strong>both</strong>- if set to true will send you events for both sides of the order book. </li>
            <li><strong>snapshot</strong>- if set to true will send you the current state of the order book before it starts streaming the changes. </li>
            </ul>
            Example: { "taker_gets" : { "currency": "USD", "issuer" : address }, "taker_pays" : { "currency": "BTC", "issuer" : address }, "snapshot" : "true" , "both" : "true" }
     ]]></desc></argument>


        <argument>
            <name>url</name>
            <type>string</type>
            <desc><![CDATA[
            Specifies a URL that paysharesd will post messages to via JSON-RPC when your specified events happen. This parameter is required if you're using the JSON-RPC endpoint. Each message will come with a sequentially increasing sequence number starting with 1.
            A gap in these numbers indicates a lost message. Currently, only http is supported and hosts must be specified by IP address.
            ]]></desc>
        </argument>
        <argument>
            <name>url_username</name>
            <type>string</type>
            <desc><![CDATA[
            Optional username for JSON-RPC authentication.
            ]]></desc>
        </argument>
        <argument>
            <name>url_password</name>
            <type>string</type>
            <desc><![CDATA[
            Optional password for JSON-RPC authentication.
            ]]></desc>
        </argument>


        <result>
            <name>Stream type 'server'</name>
            <desc><![CDATA[A Returned message from a subscribe of the "server" stream".
            <ul>
            <li><strong>type</strong> - "serverStatus"</li>
            <li><strong>load_base</strong> - the minimum/normal load factor (256)</li>
            <li><strong>load_factor</strong> - This value reflects the load the paysharesd node is under.</li>
            <li><strong>server_status</strong>/li>
            <li><strong>random</strong> - a random value generated for this event</li>
            </ul>
            ]]></desc>
        </result>

        <result>
            <name>Stream type 'ledger'</name>
            <desc><![CDATA[A Returned message from a subscribe of the "server" stream". Issued once the ledger is validated, for each ledger close.
            <ul>
            <li><strong>type</strong> - "ledgerClosed"</li>
            <li><strong>txn_count</strong> - number of transactions that will be published in this ledger.</strong></li>
            <li><strong>reserve_base</strong> - minimum reserve balance for an account to be created with.</strong></li>
            <li><strong>reserve_inc</strong> - For each "entry" that corresponds to your account (eg. offers or trust lines), your minimum reserver increments by this amount</li>
            <li><strong>fee_base</strong> - The "base" fee is the cost to send a reference transaction under no load,
    expressed in millionths of one XPS.</li>
            <li><strong>fee_ref</strong> - The units used to scale the fee base.</li>
            </ul>
            ]]></desc>
        </result>

        <result>
            <name>Stream type 'transactions'</name>
            <desc><![CDATA[A Returned message from a subscribe of the "server" stream".
            <ul>
            <li><strong>type</strong> - "transaction"</li>
            <li><strong>transaction</strong> - Transaction information</li>
            <li><strong>meta</strong> - Includes "AffectedNodes" for this transaction.</li>
            </ul>
            ]]></desc>
        </result>

        <cli_example><![CDATA[

        ]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "subscribe",
  "params": [
    {
      "accounts": [
        "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
      ],
      "url": "localhost:8000/callback-endpoint"
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "subscribe",
  "id": 1234567,
  "accounts": [
    "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
  ]
}]]></ws_example>
    </command>



    <command>
        <name>tx</name>
        <admin>false</admin>
        <desc>Get details of a specific transaction.</desc>

        <argument>
            <name>transaction</name>
            <required>true</required>
            <desc>Index (hash) of the transaction to fetch.</desc>
        </argument>

        <argument>
            <name>binary</name>
            <desc>If true, will return the binary representation of this transaction.</desc>
        </argument>

        <cli_example><![CDATA[> paysharesd tx 002F9E7ACA1F5A00CE8288B2E07DB3A363F37D9BD12B4E71CAAFC0F7BC9746AC
        ]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "tx",
  "params": [
    {
      "transaction": "002F9E7ACA1F5A00CE8288B2E07DB3A363F37D9BD12B4E71CAAFC0F7BC9746AC"
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "tx",
  "id": 1234567,
  "transaction": "002F9E7ACA1F5A00CE8288B2E07DB3A363F37D9BD12B4E71CAAFC0F7BC9746AC"
}]]></ws_example>
    </command>

    <command>
        <name>tx_history</name>
        <admin>false</admin>
        <desc>Returns the last N transactions starting from the given index. Returns from latest to earliest. N is set by paysharesd.</desc>

        <argument>
            <name>startIndex</name>
            <required>true</required>
            <desc>Index to start returning transactions from.</desc>
        </argument>

        <cli_example><![CDATA[> paysharesd tx_history 8

{
  "result":{
    "index":8,
    "status":"success",
    "txs":[
      {
        "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "Amount":"20000999999",
        "Destination":"gJkfAwXgV6RRSPrRacabETsdujiPiAVuGC",
        "Fee":"12",
        "Flags":2147483648,
        "LastLedgerSequence":465,
        "Sequence":1,
        "SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4",
        "TransactionType":"Payment",
        "TxnSignature":"12E625A39...",
        "hash":"1B6C11BFB4FA60C63DFA65A02D5BFB7C8DBDD139B16A872453CEC77BDBF69381",
        "inLedger":457,
        "ledger_index":457
      },
      {
        "Account":"gJkfAwXgV6RRSPrRacabETsdujiPiAVuGC",
        "Amount":"4000000000",
        "Destination":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "Fee":"12",
        "Flags":2147483648,
        "LastLedgerSequence":469,
        "Sequence":1,
        "SigningPubKey":"2A843AEC927E0119DE785D354C1C295414C1136924DB00E2EFBAB760BDF1E812",
        "TransactionType":"Payment",
        "TxnSignature":"2A3D35895...",
        "hash":"45354C7FE33AC84D2B8188CC1DF28EC30259326442CF1EE165970198C1EA124D",
        "inLedger":461,
        "ledger_index":461
      }
    ]
  }
}]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '{
  "method": "tx_history",
  "params": [
    {
      "start": "5"
    }
  ]
}']]></rpc_example>
        <ws_example><![CDATA[{
  "command": "tx_history",
  "id": 1234567,
  "start": "5"
}]]></ws_example>
    </command>

    <command>
        <name>unsubscribe</name>
        <admin>false</admin>
        <desc><![CDATA[ Unsubscribe from events that were previously subscribed to. See <a href="#api-subscribe">subscribe</a> for a list of possible events.
        To unsubscribe from events previously subscribed to just specify them in the same way. ]]></desc>


        <rpc_example><![CDATA[curl -X POST https://test.payshares.co:9002 -d '
{
  "method": "unsubscribe",
  "params": [
    {
      "accounts": [
        "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
      ],
      "url": "localhost:8000/callback-endpoint"
    }
  ]
}']]></rpc_example>
        <cli_example><![CDATA[ ]]></cli_example>
        <ws_example><![CDATA[{
  "command": "unsubscribe",
  "id": 1234567,
  "accounts": [
    "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U"
  ]
}]]></ws_example>
    </command>


</commands>
